<?xml version="1.0" encoding="utf-8" ?>


<?xml-stylesheet href="http://d.hatena.ne.jp/miso_soup3/rssxsl" type="text/xsl" media="screen"?>


<rdf:RDF
xmlns="http://purl.org/rss/1.0/"
xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
xmlns:content="http://purl.org/rss/1.0/modules/content/"
xmlns:dc="http://purl.org/dc/elements/1.1/"
xml:lang="ja">
<channel rdf:about="http://d.hatena.ne.jp/miso_soup3/rss">
<title>miso_soup3</title>
<link>http://d.hatena.ne.jp/miso_soup3/</link>
<description>miso_soup3</description>

<dc:creator>miso_soup3</dc:creator>
<dc:date>2012-07-28T22:54:59+09:00</dc:date>
<items>
<rdf:Seq>
<rdf:li rdf:resource="http://d.hatena.ne.jp/miso_soup3/20120728/1343483699"/>
<rdf:li rdf:resource="http://d.hatena.ne.jp/miso_soup3/20120720/1342778354"/>
<rdf:li rdf:resource="http://d.hatena.ne.jp/miso_soup3/20120719/1342686797"/>
<rdf:li rdf:resource="http://d.hatena.ne.jp/miso_soup3/20120717/1342518988"/>
<rdf:li rdf:resource="http://d.hatena.ne.jp/miso_soup3/20120706/1341567367"/>
</rdf:Seq>
</items>
</channel>



<item rdf:about="http://d.hatena.ne.jp/miso_soup3/20120728/1343483699">
<title>[イベント]Code 2012 のアンケート表示Webアプリを作成しました</title>
<link>http://d.hatena.ne.jp/miso_soup3/20120728/1343483699</link>
<description>  今日、明日と Code2012 という素晴らしいイベントが開催されています。催し物の一つとして、イベント開催前よりアンケートのAPIが公開され、数人の方がクライアントアプリを作成されています。ということで、私もアンケートを表示するだけのアプリを作ってみました。http://miso.cloudapp.net/   MVC4  MVC4 Web API  Json.Net  knockout.js  twitterのbootstrap  を使いました。サーバ側でWebClientでhttp://code ...</description>
<dc:creator>miso_soup3</dc:creator>
<dc:date>2012-07-28T22:54:59+09:00</dc:date>
<dc:subject>イベント</dc:subject>
</item>
<item rdf:about="http://d.hatena.ne.jp/miso_soup3/20120720/1342778354">
<title>[IoC]IoCフレームワーク、クラスとConfigファイルの両方から設定する</title>
<link>http://d.hatena.ne.jp/miso_soup3/20120720/1342778354</link>
<description>  IoCフレームワークの設定で、スペルミスが面倒なのでクラスで設定したい…けど、この部分だけはDebug/Release時で変更したい…という悩みに対して、StructureMap＆Unityでアレコレ試してみましたができました！両方ともできましたが、設定が被った時の、Configファイルとクラスの優先度が違っていました。  StructureMap クラスの設定です  public static class StructureMapBootstrap { public static void Conf ...</description>
<dc:creator>miso_soup3</dc:creator>
<dc:date>2012-07-20T18:59:14+09:00</dc:date>
<dc:subject>IoC</dc:subject>
</item>
<item rdf:about="http://d.hatena.ne.jp/miso_soup3/20120719/1342686797">
<title>[MVC]EFMVC より、コントローラのPOSTアクションメソッドの流れを追う</title>
<link>http://d.hatena.ne.jp/miso_soup3/20120719/1342686797</link>
<description>  コントローラのPOSTアクションメソッドで、とても綺麗だな〜と思ったコードがありましたので、それについて書きます。GETなアクションメソッドはまた別の話です。そのコードは EFMVC で書かれているものです。  綺麗だな〜と思ったコード コードはこれです。（EFMVCのコードを少し変更したものです。）  /// コンストラクタ public CategoryController(ICommandBus commandBus) { this.commandBus = commandBus; } [Htt ...</description>
<dc:creator>miso_soup3</dc:creator>
<dc:date>2012-07-19T17:33:17+09:00</dc:date>
<dc:subject>MVC</dc:subject>
</item>
<item rdf:about="http://d.hatena.ne.jp/miso_soup3/20120717/1342518988">
<title>[MVC]Unityについて追記。Unity.MVC3がありました</title>
<link>http://d.hatena.ne.jp/miso_soup3/20120717/1342518988</link>
<description>  以前書いた Project SilkにならってUnityを使ってみる の記事で、Unityの使い方を記載しましたが、Unity.MVC3 という便利なNugetパッケージがあることをコメント欄より、教えて頂きました。教えて頂きありがとうございます。これを利用すると、IDependencyResolver をわざわざ自分で実装しなくても、直ぐに設定コードの記述に入れます。ので、  install-package Unity  ではなく  install-package Unity.MVC3  の方が良い ...</description>
<dc:creator>miso_soup3</dc:creator>
<dc:date>2012-07-17T18:56:28+09:00</dc:date>
<dc:subject>MVC</dc:subject>
</item>
<item rdf:about="http://d.hatena.ne.jp/miso_soup3/20120706/1341567367">
<title>[NHibernate]ストアードプロシージャの結果を、クラスにマッピングする</title>
<link>http://d.hatena.ne.jp/miso_soup3/20120706/1341567367</link>
<description>  このようなストアドをこのようなクラスにマッピングする方法です。とりあえず２つありますが、後者の方がコードは少なくすみます。  方法１  １．クラスのマッピングをかく   ２．ストアドのマッピングをかく   ３．リポジトリ   方法２ 方法１とちがい、クラスのマッピングは必要ないです。  １．ストアドのマッピングをかく リポジトリは方法?と同じです。どちらも、many-to-oneなのマッピングも可能です。  </description>
<dc:creator>miso_soup3</dc:creator>
<dc:date>2012-07-06T18:36:07+09:00</dc:date>
<dc:subject>NHibernate</dc:subject>
</item>
</rdf:RDF>
